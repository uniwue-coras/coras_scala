-- !Ups

create table if not exists sample_solution_sub_text_nodes (
  exercise_id     integer     not null,
  parent_node_id  integer     not null,
  
  original_id     integer     not null, -- only for restoration purposes
  id              integer     not null,
  content         text        not null,
  applicability   varchar(20) not null,

  primary key (exercise_id, parent_node_id, id),
  foreign key (exercise_id, parent_node_id) references sample_solution_nodes (exercise_id, id) on update cascade on delete cascade
);

insert into sample_solution_sub_text_nodes (exercise_id, parent_node_id, original_id, id, content, applicability)
  select exercise_id, parent_id, id, child_index, text, applicability
  from sample_solution_nodes 
  where is_subtext;

create table if not exists user_solution_sub_text_nodes (
  username       varchar(100) not null,
  exercise_id    integer      not null,
  parent_node_id integer      not null,
  original_id     integer     not null, -- only for restoration purposes
  id             integer      not null,
  content        text         not null,
  applicability  varchar(20)  not null,

  primary key (username, exercise_id, parent_node_id, id),
  foreign key (username, exercise_id, parent_node_id) references user_solution_nodes (username, exercise_id, id) on update cascade on delete cascade
);

insert into user_solution_sub_text_nodes (username, exercise_id, parent_node_id, original_id, id, content, applicability)
  select username, exercise_id, parent_id, id, child_index, text, applicability
  from user_solution_nodes
  where is_subtext;

create table if not exists sub_text_matches (
  username           varchar(100) not null,
  exercise_id        integer      not null,
  sample_node_id     integer      not null,
  sample_sub_text_id integer      not null,
  user_node_id       integer      not null,
  user_sub_text_id   integer      not null,

  primary key (username, exercise_id, sample_node_id, sample_sub_text_id, user_node_id, user_sub_text_id),
  foreign key (exercise_id, sample_node_id, sample_sub_text_id)
    references sample_solution_sub_text_nodes (exercise_id, parent_node_id, id)
    on update cascade on delete cascade,
  foreign key (username, exercise_id, user_node_id, user_sub_text_id)
    references user_solution_sub_text_nodes (username, exercise_id, parent_node_id, id)
    on update cascade on delete cascade
);

-- TODO: update node <-> subText (or reverser) matches!

insert into sub_text_matches (username, exercise_id, sample_node_id, sample_sub_text_id, user_node_id, user_sub_text_id)
  select *
  from solution_node_matches as match
  join sample_solution_nodes as sample_nodes on sample_nodes.exercise_id = match.exercise_id and sample_nodes.id = match.sample_node_id;

-- TODO: move (=> copy + delete) subText matches!

-- TODO: deletes matches for sub texts!


-- delete old data

delete from sample_solution_nodes where is_subtext;

delete from user_solution_nodes where is_subtext;

-- TODO: move old subtexts matches in user_sol_nodes, update table structure!

-- !Downs

-- TODO: copy data back to original table!

insert into sample_solution_nodes (exercise_id, id, child_index, is_subtext, text, applicability, parent_id)
  select exercise_id, original_id, id, true, content, applicability, parent_node_id
  from sample_solution_sub_text_nodes;

insert ignore into user_solution_nodes (username, exercise_id, id, child_index, is_subtext, text, applicability, parent_id)
  select username, exercise_id, original_id, id, true, content, applicability, parent_node_id
  from user_solution_sub_text_nodes;

drop table if exists
  user_solution_sub_text_nodes,
  sample_solution_sub_text_nodes;
