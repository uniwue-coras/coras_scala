type Abbreviation {
  abbreviation: String!
  word: String!
}

input AbbreviationInput {
  abbreviation: String!
  word: String!
}

type AbbreviationMutations {
  delete: Boolean!
  edit(abbreviationInput: AbbreviationInput!): Abbreviation!
}

type Annotation {
  annotationType: AnnotationType!
  endIndex: Int!
  errorType: ErrorType!
  id: Int!
  importance: AnnotationImportance!
  startIndex: Int!
  text: String!
}

enum AnnotationImportance {
  Less
  Medium
  More
}

input AnnotationInput {
  endIndex: Int!
  errorType: ErrorType!
  importance: AnnotationImportance!
  startIndex: Int!
  text: String!
}

type AnnotationMutations {
  delete: Int!
  reject: Boolean!
}

enum AnnotationType {
  Automatic
  Manual
  RejectedAutomatic
}

enum Applicability {
  Applicable
  NotApplicable
  NotSpecified
}

enum CorrectionStatus {
  Finished
  Ongoing
  Waiting
}

type CorrectionSummary {
  comment: String!
  points: Int!
}

enum ErrorType {
  Missing
  Wrong
}

type Exercise {
  id: Int!
  sampleSolution: [FlatSampleSolutionNode!]!
  text: String!
  title: String!
  userSolution(username: String!): UserSolution
  userSolutions: [UserSolution!]!
}

input ExerciseInput {
  sampleSolution: [FlatSolutionNodeInput!]!
  text: String!
  title: String!
}

type ExerciseMutations {
  submitSolution(userSolution: UserSolutionInput!): Boolean!
  userSolution(username: String!): UserSolutionMutations
}

type FlatSampleSolutionNode implements IFlatSolutionNode {
  applicability: Applicability!
  childIndex: Int!
  id: Int!
  isSubText: Boolean!
  parentId: Int
  text: String!
}

input FlatSolutionNodeInput {
  applicability: Applicability!
  childIndex: Int!
  id: Int!
  isSubText: Boolean!
  parentId: Int
  text: String!
}

type FlatUserSolutionNode implements IFlatSolutionNode {
  annotationTextRecommendations(endIndex: Int!, startIndex: Int!): [String!]!
  annotations: [Annotation!]!
  applicability: Applicability!
  childIndex: Int!
  id: Int!
  isSubText: Boolean!
  parentId: Int
  text: String!
}

interface IFlatSolutionNode {
  applicability: Applicability!
  childIndex: Int!
  id: Int!
  isSubText: Boolean!
  parentId: Int
  text: String!
}

enum MatchStatus {
  Automatic
  Deleted
  Manual
}

type Mutation {
  abbreviation(abbreviation: String!): AbbreviationMutations
  changePassword(oldPassword: String!, password: String!, passwordRepeat: String!): Boolean!
  changeRights(newRights: Rights!, username: String!): Rights!
  claimJwt(ltiUuid: String!): String
  createEmptyRelatedWordsGroup: Int!
  createExercise(exerciseInput: ExerciseInput!): Int!
  exerciseMutations(exerciseId: Int!): ExerciseMutations
  login(password: String!, username: String!): String!
  register(password: String!, passwordRepeat: String!, username: String!): String!
  relatedWordsGroup(groupId: Int!): RelatedWordGroupMutations
  submitNewAbbreviation(abbreviationInput: AbbreviationInput!): Abbreviation!
}

type Query {
  abbreviations: [Abbreviation!]!
  exercise(exerciseId: Int!): Exercise
  exercises: [Exercise!]!
  mySolutions: [SolutionIdentifier!]!
  relatedWordGroups: [RelatedWordsGroup!]!
  reviewCorrection(exerciseId: Int!): ReviewData!
  reviewCorrectionByUuid(uuid: String!): ReviewData
  users: [User!]!
}

type RelatedWord {
  isPositive: Boolean!
  word: String!
}

type RelatedWordGroupMutations {
  delete: Boolean!
  relatedWord(word: String!): RelatedWordMutations
  submitRelatedWord(relatedWordInput: RelatedWordInput!): RelatedWord!
}

input RelatedWordInput {
  isPositive: Boolean!
  word: String!
}

type RelatedWordMutations {
  delete: Boolean!
  edit(relatedWordInput: RelatedWordInput!): RelatedWord!
}

type RelatedWordsGroup {
  content: [RelatedWord!]!
  groupId: Int!
}

type ReviewData {
  comment: String!
  matches: [SolutionNodeMatch!]!
  points: Int!
  sampleSolution: [FlatSampleSolutionNode!]!
  userSolution: [FlatUserSolutionNode!]!
}

enum Rights {
  Admin
  Corrector
  Student
}

type SolutionIdentifier {
  correctionStatus: CorrectionStatus
  exerciseId: Int!
  exerciseTitle: String!
}

type SolutionNodeMatch {
  certainty: Float
  exerciseId: Int!
  matchStatus: MatchStatus!
  sampleNodeId: Int!
  sampleValue: Int! @deprecated(reason: "use sampleNodeId")
  userNodeId: Int!
  userValue: Int! @deprecated(reason: "use sampleNodeId!")
  username: String!
}

type User {
  rights: Rights!
  username: String!
}

type UserSolution {
  correctionStatus: CorrectionStatus!
  correctionSummary: CorrectionSummary
  matches: [SolutionNodeMatch!]!
  node(userSolutionNodeId: Int!): FlatUserSolutionNode
  nodes: [FlatUserSolutionNode!]!
  username: String!
}

input UserSolutionInput {
  solution: [FlatSolutionNodeInput!]!
  username: String!
}

type UserSolutionMutations {
  finishCorrection: CorrectionStatus!
  initiateCorrection: CorrectionStatus!
  node(userSolutionNodeId: Int!): UserSolutionNode!
  updateCorrectionResult(comment: String!, points: Int!): CorrectionSummary!
}

type UserSolutionNode {
  annotation(annotationId: Int!): AnnotationMutations
  deleteMatch(sampleSolutionNodeId: Int!): Boolean!
  submitMatch(sampleSolutionNodeId: Int!): SolutionNodeMatch!
  upsertAnnotation(annotation: AnnotationInput!, maybeAnnotationId: Int): Annotation!
}