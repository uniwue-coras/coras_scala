enum Applicability {
  Applicable
  NotApplicable
  NotSpecified
}

type Exercise {
  allUsersWithCorrection: [String!]!
  allUsersWithSolution: [String!]!
  corrected: Boolean!
  flatCorrectionForUser(username: String!): FlatCorrection!
  flatSampleSolution: [FlatSolutionNode!]!
  flatUserSolution(username: String!): [FlatSolutionNode!]!
  id: Int!
  solutionSubmitted: Boolean!
  text: String!
  title: String!
}

type ExerciseMutations {
  submitCorrection(correctionInput: GraphQLCorrectionInput!): Boolean!
  submitSolution(userSolution: GraphQLUserSolutionInput!): Boolean!
}

type FlatCorrection {
  matches: [NodeMatch!]!
  sampleSolution: [FlatSolutionNode!]!
  userSolution: [FlatSolutionNode!]!
}

type FlatSolutionNode {
  applicability: Applicability!
  childIndex: Int!
  id: Int!
  parentId: Int
  subTexts: [SolutionNodeSubText!]!
  text: String!
}

input FlatSolutionNodeInput {
  applicability: Applicability!
  childIndex: Int!
  id: Int!
  parentId: Int
  subTexts: [SolutionNodeSubTextInput!]!
  text: String!
}

input GraphQLCorrectionInput {
  correctionAsJson: String!
  username: String!
}

input GraphQLExerciseInput {
  sampleSolution: [FlatSolutionNodeInput!]!
  text: String!
  title: String!
}

input GraphQLUserSolutionInput {
  maybeUsername: String
  solution: [FlatSolutionNodeInput!]!
}

type Mutation {
  changePassword(oldPassword: String!, password: String!, passwordRepeat: String!): Boolean!
  claimJwt(ltiUuid: String!): String
  createExercise(exerciseInput: GraphQLExerciseInput!): Int!
  exerciseMutations(exerciseId: Int!): ExerciseMutations
  login(password: String!, username: String!): String!
  register(password: String!, passwordRepeat: String!, username: String!): String!
}

type NodeMatch {
  certainty: Float
  sampleValue: Int!
  userValue: Int!
}

type Query {
  exercise(exerciseId: Int!): Exercise!
  exercises: [Exercise!]!
}

enum Rights {
  Admin
  Corrector
  Student
}

type SolutionNodeSubText {
  applicability: Applicability!
  text: String!
}

input SolutionNodeSubTextInput {
  applicability: Applicability!
  text: String!
}