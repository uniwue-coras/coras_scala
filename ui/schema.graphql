type AdminMutations {
  addExercise(exerciseInput: ExerciseInput!): Int!
  changeUserRights(rights: Rights!, username: String!): Rights!
}

type AdminQueries {
  usersByPrefix(prefix: String!): [String!]!
  usersWithRights(rights: Rights!): [String!]!
}

type AnalyzedSubText {
  applicability: Applicability!
  text: String!
}

input AnalyzedSubTextInput {
  applicability: Applicability!
  text: String!
}

enum Applicability {
  Applicable
  NotApplicable
  NotSpecified
}

input ChangePasswordInput {
  newPassword: String!
  newPasswordRepeat: String!
  oldPassword: String!
}

input EntryCorrectionInput {
  applicabilityComment: String
  applicabilityCorrect: Boolean!
  comment: String
  definitionComment: String
  sampleEntryId: Int!
  subTextCorrections: [SubTextCorrectionInput!]!
  userEntryId: Int!
}

type Exercise {
  allUsersWithSolution: [String!]!
  id: Int!
  sampleSolution: [FlatSolutionEntry!]!
  solutionForUser(username: String!): [FlatSolutionEntry!]!
  solutionSubmitted: Boolean!
  text: String!
  title: String!
}

input ExerciseInput {
  sampleSolution: [FlatSolutionEntryInput!]!
  text: String!
  title: String!
}

type ExerciseMutations {
  submitSolution(solution: SubmitSolutionInput!): Boolean!
  userSolutionMutations(username: String!): UserSolutionMutations!
}

type FlatSolutionEntry {
  applicability: Applicability!
  id: Int!
  parentId: Int
  priorityPoints: Int
  subTexts: [AnalyzedSubText!]!
  text: String!
  weight: Int
}

input FlatSolutionEntryInput {
  applicability: Applicability!
  id: Int!
  parentId: Int
  priorityPoints: Int
  subTexts: [AnalyzedSubTextInput!]!
  text: String!
  weight: Int
}

input LoginInput {
  password: String!
  username: String!
}

type LoginResult {
  jwt: String!
  name: String
  rights: Rights!
  username: String!
}

type Mutation {
  adminMutations: AdminMutations!
  changePassword(changePasswordInput: ChangePasswordInput!): Boolean!
  exerciseMutations(exerciseId: Int!): ExerciseMutations
  login(loginInput: LoginInput!): LoginResult!
  register(registerInput: RegisterInput!): String!
}

type Query {
  adminQueries: AdminQueries!
  exercise(exerciseId: Int!): Exercise
  exercises: [Exercise!]!
}

input RegisterInput {
  password: String!
  passwordRepeat: String!
  username: String!
}

enum Rights {
  Admin
  Corrector
  Student
}

input SubTextCorrectionInput {
  applicabilityComment: String
  applicabilityCorrect: Boolean!
  comment: String
  sampleSubTextId: Int!
  userSubTextId: Int!
}

input SubmitSolutionInput {
  solution: [FlatSolutionEntryInput!]!
  username: String
}

type UserSolutionMutations {
  submitCorrection(entryCorrections: [EntryCorrectionInput!]!): Boolean!
}