enum Applicability {
  Applicable
  NotApplicable
  NotSpecified
}

input ChangePasswordInput {
  newPassword: String!
  newPasswordRepeat: String!
  oldPassword: String!
}

type CompleteExercise {
  allUsersWithSolution: [String!]!
  id: Int!
  sampleSolution: [SolutionNode!]!
  solutionForUser(username: String!): MongoUserSolution
  solutionSubmitted: Boolean!
  text: String!
  title: String!
}

type ExerciseMutations {
  userSolutionMutations(username: String!): UserSolutionMutations!
}

input LoginInput {
  password: String!
  username: String!
}

type LoginResult {
  jwt: String!
  name: String
  rights: Rights!
  username: String!
}

type MongoUserSolution {
  exerciseId: Int!
  solution: [SolutionNode!]!
  username: String!
}

type Mutation {
  changePassword(changePasswordInput: ChangePasswordInput!): Boolean!
  exerciseMutations(exerciseId: Int!): ExerciseMutations
  login(loginInput: LoginInput!): LoginResult!
  register(registerInput: RegisterInput!): String!
}

input NodeMatchInput {
  matchId: Int!
  parentMatchId: Int
  sampleNodeId: Int!
  userNodeId: Int!
}

type Query {
  exercise(exerciseId: Int!): CompleteExercise
  exercises: [CompleteExercise!]!
}

input RegisterInput {
  password: String!
  passwordRepeat: String!
  username: String!
}

enum Rights {
  Admin
  Corrector
  Student
}

type SolutionNode {
  applicability: Applicability!
  id: Int!
  subTexts: [SolutionNodeSubText!]!
  text: String!
}

type SolutionNodeSubText {
  applicability: Applicability!
  text: String!
}

type UserSolutionMutations {
  saveMatch(nodeMatchInput: NodeMatchInput!): Boolean!
}