input ChangePasswordInput {
  newPassword: String!
  newPasswordRepeat: String!
  oldPassword: String!
}

type Exercise {
  allUsersWithCorrection: [String!]!
  allUsersWithSolution: [String!]!
  corrected: Boolean!
  id: Int!
  sampleSolutionAsJson: String!
  solutionSubmitted: Boolean!
  text: String!
  title: String!
}

type ExerciseMutations {
  submitSolution(userSolution: GraphQLUserSolutionInput!): Boolean!
}

input GraphQLExerciseInput {
  sampleSolutionAsJson: String!
  text: String!
  title: String!
}

input GraphQLUserSolutionInput {
  maybeUsername: String
  solutionAsJson: String!
}

input LoginInput {
  password: String!
  username: String!
}

type LoginResult {
  jwt: String!
  rights: Rights!
  username: String!
}

type Mutation {
  changePassword(changePasswordInput: ChangePasswordInput!): Boolean!
  createExercise(exerciseInput: GraphQLExerciseInput!): Int!
  exerciseMutations(exerciseId: Int!): ExerciseMutations
  login(loginInput: LoginInput!): LoginResult!
  register(registerInput: RegisterInput!): String!
}

type Query {
  exercise(exerciseId: Int!): Exercise
  exercises: [Exercise!]!
}

input RegisterInput {
  password: String!
  passwordRepeat: String!
  username: String!
}

enum Rights {
  Admin
  Corrector
  Student
}