type Annotation {
  endIndex: Int!
  errorType: ErrorType!
  id: Int!
  startIndex: Int!
  text: String!
}

input AnnotationInput {
  endIndex: Int!
  errorType: ErrorType!
  startIndex: Int!
  text: String!
}

enum Applicability {
  Applicable
  NotApplicable
  NotSpecified
}

enum ErrorType {
  Missing
  Wrong
}

type Exercise {
  allUsersWithCorrection: [String!]!
  allUsersWithSolution: [String!]!
  corrected: Boolean!
  flatCorrectionForUser(username: String!): [NodeIdMatch!]!
  flatSampleSolution: [FlatSampleSolutionNode!]!
  flatUserSolution(username: String!): [FlatUserSolutionNode!]!
  id: Int!
  solutionSubmitted: Boolean!
  text: String!
  title: String!
}

type ExerciseMutations {
  submitCorrection(correctionInput: GraphQLCorrectionInput!): Boolean! @deprecated(reason: "Will be removed!")
  submitSolution(userSolution: GraphQLUserSolutionInput!): Boolean!
  userSolutionNode(userSolutionNodeId: Int!, username: String!): UserSolutionNode!
}

type ExtractedWord {
  index: Int!
  word: String!
}

type FlatSampleSolutionNode implements IFlatSolutionNode {
  applicability: Applicability!
  childIndex: Int!
  id: Int!
  isSubText: Boolean!
  parentId: Int
  text: String!
}

input FlatSolutionNodeInput {
  applicability: Applicability!
  childIndex: Int!
  id: Int!
  isSubText: Boolean!
  parentId: Int
  text: String!
}

type FlatUserSolutionNode implements IFlatSolutionNode {
  annotations: [Annotation!]!
  applicability: Applicability!
  childIndex: Int!
  id: Int!
  isSubText: Boolean!
  parentId: Int
  text: String!
}

input GraphQLCorrectionInput {
  correctionAsJson: String!
  username: String!
}

input GraphQLExerciseInput {
  sampleSolution: [FlatSolutionNodeInput!]!
  text: String!
  title: String!
}

input GraphQLUserSolutionInput {
  maybeUsername: String
  solution: [FlatSolutionNodeInput!]!
}

interface IFlatSolutionNode {
  applicability: Applicability!
  childIndex: Int!
  id: Int!
  isSubText: Boolean!
  parentId: Int
  text: String!
}

type Match {
  sampleValue: ExtractedWord!
  userValue: ExtractedWord!
}

type Mutation {
  changePassword(oldPassword: String!, password: String!, passwordRepeat: String!): Boolean!
  claimJwt(ltiUuid: String!): String
  createExercise(exerciseInput: GraphQLExerciseInput!): Int!
  exerciseMutations(exerciseId: Int!): ExerciseMutations!
  login(password: String!, username: String!): String!
  register(password: String!, passwordRepeat: String!, username: String!): String!
}

type NodeIdMatch {
  explanation: NounMatchingResult
  sampleValue: Int!
  userValue: Int!
}

type NounMatchingResult {
  matches: [Match!]!
  notMatchedSample: [ExtractedWord!]!
  notMatchedUser: [ExtractedWord!]!
}

type Query {
  exercise(exerciseId: Int!): Exercise!
  exercises: [Exercise!]!
}

enum Rights {
  Admin
  Corrector
  Student
}

type UserSolutionNode {
  deleteAnnotation(annotationId: Int!): Int!
  upsertAnnotation(annotation: AnnotationInput!, maybeAnnotationId: Int): Annotation!
}