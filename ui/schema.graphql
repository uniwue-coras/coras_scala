type AdminMutations {
  addExercise(exerciseInput: ExerciseInput!): Int!
  changeUserRights(rights: Rights!, username: String!): Rights!
}

type AdminQueries {
  usersByPrefix(prefix: String!): [String!]!
  usersWithRights(rights: Rights!): [String!]!
}

type AnalyzedSubText {
  applicability: Applicability!
  text: String!
}

enum Applicability {
  Applicable
  NotApplicable
  NotSpecified
}

input ChangePasswordInput {
  newPassword: String!
  newPasswordRepeat: String!
  oldPassword: String!
}

type Exercise {
  allUsersWithSolution: [String!]!
  id: Int!
  sampleSolution: [FlatSolutionEntry!]!
  solutionForUser(username: String!): [[FlatSolutionEntry!]!]!
  solutionSubmitted: Boolean!
  text: String!
  title: String!
}

input ExerciseInput {
  id: Int!
  text: String!
  title: String!
}

type ExerciseMutations {
  submitSolutionForUser(solution: [FlatSolutionEntryInput!]!, username: String!): Boolean!
  submitUserSolution(solution: [FlatSolutionEntryInput!]!): Boolean!
}

type FlatSolutionEntry {
  applicability: Applicability!
  id: Int!
  paragraphCitations: [ParagraphCitation!]!
  parentId: Int
  priorityPoints: Int
  subTexts: [AnalyzedSubText!]!
  text: String!
  weight: Int
}

input FlatSolutionEntryInput {
  applicability: Applicability!
  id: Int!
  parentId: Int
  priorityPoints: Int
  text: String!
  weight: Int
}

input LoginInput {
  password: String!
  username: String!
}

type LoginResult {
  jwt: String!
  name: String
  rights: Rights!
  username: String!
}

type Mutation {
  adminMutations: AdminMutations!
  changePassword(changePasswordInput: ChangePasswordInput!): Boolean!
  exerciseMutations(exerciseId: Int!): ExerciseMutations
  login(loginInput: LoginInput!): LoginResult!
  register(registerInput: RegisterInput!): String!
}

type ParagraphCitation {
  endIndex: Int!
  id: Int!
  lawCode: String
  paragraph: Int!
  paragraphType: ParagraphType!
  sentence: Int
  startIndex: Int!
  subParagraph: Int
}

enum ParagraphType {
  Bavarian
  German
}

type Query {
  adminQueries: AdminQueries!
  exercise(exerciseId: Int!): Exercise
  exercises: [Exercise!]!
  testDocx: Boolean!
}

input RegisterInput {
  password: String!
  passwordRepeat: String!
  username: String!
}

enum Rights {
  Admin
  Corrector
  Student
}