# /register, /login, /lti/:ltiUuid, /changePassword

mutation Register($username: String!, $password: String!, $passwordRepeat: String!) {
  register(username: $username, password: $password, passwordRepeat: $passwordRepeat)
}

mutation Login($username: String!, $password: String!) {
  login(username: $username, password: $password)
}

mutation ClaimJwt($ltiUuid: String!) {
  claimJwt(ltiUuid: $ltiUuid)
}

mutation ChangePassword($oldPassword: String!, $password: String!, $passwordRepeat: String!) {
  changePassword(oldPassword: $oldPassword, password: $password, passwordRepeat: $passwordRepeat)
}


# /userManagement

fragment User on User {
  username
  rights
}

query UserManagement {
  users {
    ...User
  }
}

mutation ChangeRights($username: String!, $newRights: Rights!) {
  changeRights(username: $username, newRights: $newRights)
}

# /

query AllExercises {
  exercises {
    id
    title
  }
}

# /createExercise

mutation CreateExercise($exerciseInput: ExerciseInput!) {
  createExercise(exerciseInput: $exerciseInput)
}

# /exercises/:exerciseId

fragment ExerciseOverview on Exercise {
  title
  text
  userSolutions {
    username
    correctionStatus
    reviewUuid
  }
}

query ExerciseOverview($exerciseId: Int!) {
  exercise(exerciseId: $exerciseId) {
    ...ExerciseOverview
  }
}

mutation InitiateCorrection($username: String!, $exerciseId: Int!) {
  exerciseMutations(exerciseId: $exerciseId) {
    userSolution(username: $username) {
      initiateCorrection
    }
  }
}

# /exercise/:exerciseId/solutions/submit

query ExerciseTaskDefinition($exerciseId: Int!) {
  exercise(exerciseId: $exerciseId) {
    ...ExerciseTaskDefinition
  }
}

fragment ExerciseTaskDefinition on Exercise {
  title
  text
}

mutation SubmitSolution($exerciseId: Int!, $userSolution: UserSolutionInput!) {
  exerciseMutations(exerciseId: $exerciseId) {
    submitSolution(userSolution: $userSolution)
  }
}

# /exercises/:exerciseId/solutions/:username/correctSolution

fragment IFlatSolutionNode on IFlatSolutionNode {
  id
  childIndex
  isSubText
  text
  applicability
  parentId
}

fragment Annotation on Annotation {
  id
  errorType
  importance
  startIndex
  endIndex
  text
}

fragment FlatUserSolutionNode on FlatUserSolutionNode {
  ...IFlatSolutionNode
  annotations {
    ...Annotation
  }
}

fragment SolutionNodeMatch on SolutionNodeMatch {
  sampleValue
  userValue
  matchStatus
  certainty
}

fragment UserSolution on UserSolution {
  # correctionStatus
  nodes {
    ...FlatUserSolutionNode
  }
  matches {
    ...SolutionNodeMatch
  }
  correctionSummary {
    ...CorrectionSummary
  }
}

query NewCorrection($exerciseId: Int!, $username: String!) {
  exercise(exerciseId: $exerciseId) {
    sampleSolution {
      ...IFlatSolutionNode
    }
    userSolution(username: $username) {
      ...UserSolution
    }
  }
}

mutation SubmitNewMatch($exerciseId: Int!, $username: String!, $sampleNodeId: Int!, $userNodeId: Int!) {
  exerciseMutations(exerciseId: $exerciseId)  {
    userSolution(username: $username) {
      node(userSolutionNodeId: $userNodeId)  {
        submitMatch(sampleSolutionNodeId: $sampleNodeId) {
          ...SolutionNodeMatch
        }
      }
    }
  }
}

mutation DeleteMatch($exerciseId: Int!, $username: String!, $sampleNodeId: Int!, $userNodeId: Int!) {
  exerciseMutations(exerciseId: $exerciseId) {
    userSolution(username: $username) {
      node(userSolutionNodeId: $userNodeId) {
        deleteMatch(sampleSolutionNodeId: $sampleNodeId)
      }
    }
  }
}

mutation UpsertAnnotation($exerciseId: Int!, $username: String!, $nodeId: Int!, $maybeAnnotationId: Int, $annotationInput: AnnotationInput!) {
  exerciseMutations(exerciseId: $exerciseId) {
    userSolution(username: $username) {
      node(userSolutionNodeId: $nodeId) {
        upsertAnnotation(maybeAnnotationId: $maybeAnnotationId, annotation: $annotationInput) {
          ...Annotation
        }
      }
    }
  }
}

mutation UpsertCorrectionResult($exerciseId: Int!, $username: String!, $comment: String!, $points: Int!) {
  exerciseMutations(exerciseId: $exerciseId) {
    userSolution(username: $username) {
      updateCorrectionResult(comment: $comment, points: $points) {
        comment
        points
      }
    }
  }
}

mutation DeleteAnnotation($exerciseId: Int!, $username: String!, $userSolutionNodeId: Int!, $annotationId: Int!) {
  exerciseMutations(exerciseId: $exerciseId) {
    userSolution(username: $username) {
      node(userSolutionNodeId: $userSolutionNodeId) {
        deleteAnnotation(annotationId: $annotationId)
      }
    }
  }
}

fragment CorrectionSummary on CorrectionSummary {
  comment
  points
}

mutation UpsertCorrectionSummary($exerciseId: Int!, $username: String!, $comment: String!, $points: Int!) {
  exerciseMutations(exerciseId: $exerciseId) {
    userSolution(username: $username) {
      updateCorrectionResult(comment: $comment, points: $points) {
        ...CorrectionSummary
      }
    }
  }
}

mutation FinishCorrection($exerciseId: Int!, $username: String!) {
  exerciseMutations(exerciseId: $exerciseId) {
    userSolution(username: $username) {
      finishCorrection
    }
  }
}

# /correctionReview/:reviewUuid

query CorrectionReview($correctionReviewUuid: String!) {
  reviewCorrection(correctionReviewUuid: $correctionReviewUuid) {
    userSolution {
      ...FlatUserSolutionNode
    }
    sampleSolution {
      ...IFlatSolutionNode
    }
    matches {
      ...SolutionNodeMatch
    }

  }
}
