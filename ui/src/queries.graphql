# /register

mutation Register($username: String!, $password: String!, $passwordRepeat: String!) {
  register(username: $username, password: $password, passwordRepeat: $passwordRepeat)
}

# /login, /lti/:ltiUuid

mutation Login($username: String!, $password: String!) {
  login(username: $username, password: $password)
}

mutation ClaimJwt($ltiUuid: String!) {
  claimJwt(ltiUuid: $ltiUuid)
}

# /changePassword

mutation ChangePassword($oldPassword: String!, $password: String!, $passwordRepeat: String!) {
  changePassword(oldPassword: $oldPassword, password: $password, passwordRepeat: $passwordRepeat)
}

# /

query AllExercises {
  exercises {
    id
    title
  }
}

# /createExercise

mutation CreateExercise($exerciseInput: GraphQLExerciseInput!) {
  createExercise(exerciseInput: $exerciseInput)
}

# /exercises/:exerciseId

query ExerciseOverview($exerciseId: Int!) {
  exercise(exerciseId: $exerciseId) {
    ...ExerciseOverview
  }
}

fragment ExerciseOverview on Exercise {
  title
  text
  solutionSubmitted
  allUsersWithSolution
  corrected
  allUsersWithCorrection
}

# /exercise/:exerciseId/solutions/submit

query ExerciseTaskDefinition($exerciseId: Int!) {
  exercise(exerciseId: $exerciseId) {
    ...ExerciseTaskDefinition
  }
}

fragment ExerciseTaskDefinition on Exercise {
  title
  text
}

mutation SubmitSolution($exerciseId: Int!, $userSolution: GraphQLUserSolutionInput!) {
  exerciseMutations(exerciseId: $exerciseId) {
    submitSolution(userSolution: $userSolution)
  }
}

# /exercises/:exerciseId/solutions/:username/correctSolution, /exercises/:exerciseId/solutions/:username/updateCorrection

fragment FlatSolutionNode on FlatSolutionNode {
  id
  childIndex
  text
  applicability
  subTexts {
    id
    text
  }
  parentId
}

fragment ExtractedWord on ExtractedWord {
  index
  word
}

fragment NounMatchingResult on NounMatchingResult {
  matches {
    sampleValue {
      ...ExtractedWord
    }
    userValue {
      ...ExtractedWord
    }
  }
}

fragment NodeMatch on NodeIdMatch {
  sampleValue
  userValue
  explanation {
    ...NounMatchingResult
  }
}

query NewCorrection($exerciseId: Int!, $username: String!) {
  exercise(exerciseId: $exerciseId) {
    flatSampleSolution {
      ...FlatSolutionNode
    }
    flatUserSolution(username: $username) {
      ...FlatSolutionNode
    }
    flatCorrectionForUser(username: $username) {
      ...NodeMatch
    }
  }
}

mutation SubmitCorrection($exerciseId: Int!, $correctionInput: GraphQLCorrectionInput!) {
  exerciseMutations(exerciseId: $exerciseId) {
    submitCorrection(correctionInput: $correctionInput)
  }
}
