fragment MatchingReviewSolNode on SolutionNode {
  id
  childIndex
  text
  isSubText
  applicability
  parentId
  paragraphCitationLocations {
    ...ParagraphCitationLocation
  }
}

# basic data

query MatchingReview($exerciseId: Int!) {
  exercise(exerciseId: $exerciseId) {
    title
    sampleSolutionNodes: sampleSolution {
      ...MatchingReviewSolNode
    }
    usernames: userSolutions {
      username
    }
  }
}

# single user solution

fragment ISolutionNodeMatch on ISolutionNodeMatch {
  sampleNodeId
  userNodeId
  matchStatus
  certainty
}

fragment GoldStandardMatch on SolutionNodeMatch {
  ...ISolutionNodeMatch
}

fragment WordWithRelatedWords on WordWithRelatedWords {
  word
  synonyms
  antonyms
}

fragment SolNodeMatchExplanation on SolutionNodeMatchExplanation {
  wordMatchingResult {
    matches {
      sampleValue {
        ...WordWithRelatedWords
      }
      userValue {
        ...WordWithRelatedWords
      }
      maybeExplanation {
        # TODO!
        __typename
      }
    }
    notMatchedSample {
      ...WordWithRelatedWords
    }
    notMatchedUser {
      ...WordWithRelatedWords
    }
  }
  maybePararaphMatchingResult {
    matches {
      sampleValue {
        ...ParagraphCitation
      }
      userValue {
        ...ParagraphCitation
      }
      maybeExplanation {
        # TODO!
        __typename
      }
    }
    notMatchedSample {
      ...ParagraphCitation
    }
    notMatchedUser {
      ...ParagraphCitation
    }
  }
}

fragment DefaultSolutionNodeMatch on DefaultSolutionNodeMatch {
  ...ISolutionNodeMatch
  maybeExplanation {
    ...SolNodeMatchExplanation
  }
}

query MatchingReviewUserSolution($exerciseId: Int!, $username: String!) {
  exercise(exerciseId: $exerciseId) {
    userSolution(username: $username) {
      userSolutionNodes: nodes {
        ...MatchingReviewSolNode
      }
      goldStandardMatches: matches {
        ...GoldStandardMatch
      }
      matches: performCurrentCorrection {
        ...DefaultSolutionNodeMatch
      }
    }
  }
}

# explain new match
query PreviewMatch($exerciseId: Int!, $username: String!, $sampleNodeId: Int!, $userNodeId: Int!) {
  exercise(exerciseId: $exerciseId) {
    userSolution(username: $username) {
      node(userSolutionNodeId: $userNodeId) {
        previewMatchAgainst(sampleSolutionNodeId: $sampleNodeId) {
          ...DefaultSolutionNodeMatch
        }
      }
    }
  }
}
