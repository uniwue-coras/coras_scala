type Abbreviation {
  abbreviation: String!
  word: String!
}

input AbbreviationInput {
  abbreviation: String!
  word: String!
}

type AbbreviationMutations {
  delete: Abbreviation!
  edit(abbreviationInput: AbbreviationInput!): Abbreviation!
}

type Annotation {
  annotationType: AnnotationType!
  endIndex: Int!
  errorType: ErrorType!
  id: Int!
  importance: Importance!
  startIndex: Int!
  text: String!
}

input AnnotationInput {
  endIndex: Int!
  errorType: ErrorType!
  importance: Importance!
  startIndex: Int!
  text: String!
}

type AnnotationMutations {
  delete: Int!
}

enum AnnotationType {
  Automatic
  Manual
  RejectedAutomatic
}

enum Applicability {
  Applicable
  NotApplicable
  NotSpecified
}

type CorrectionSummary {
  comment: String!
  points: Int!
}

enum Correctness {
  Correct
  Partially
  Unspecified
  Wrong
}

enum ErrorType {
  Missing
  Neutral
  Wrong
}

type Exercise {
  id: Int!
  sampleSolution: [SampleSolutionNode!]!
  text: String!
  title: String!
  userSolution(username: String!): UserSolution
  userSolutions: [UserSolution!]!
}

input ExerciseInput {
  sampleSolution: [SolutionNodeInput!]!
  text: String!
  title: String!
}

type ExerciseMutations {
  submitSolution(userSolution: UserSolutionInput!): UserSolution
  userSolution(username: String!): UserSolutionMutations
}

type ExplanationAnnotation {
  annotation: String!
  sampleNodeId: Int!
  userNodeId: Int!
}

type ExplanationAnnotationMutations {
  delete: ExplanationAnnotation!
  edit(text: String!): String!
}

interface IParagraphSynonymIdentifier {
  lawCode: String!
  paragraph: String!
  paragraphType: String!
  section: String!
}

enum Importance {
  Less
  Medium
  More
}

enum MatchStatus {
  Automatic
  Deleted
  Manual
}

type Mutation {
  abbreviation(abbreviation: String!): AbbreviationMutations
  changePassword(oldPassword: String!, password: String!, passwordRepeat: String!): Boolean!
  changeRights(newRights: Rights!, username: String!): Rights!
  claimJwt(ltiUuid: String!): String
  createEmptyRelatedWordsGroup: Int!
  createExercise(exerciseInput: ExerciseInput!): Int!
  createParagraphSynonym(paragraphSynonymInput: ParagraphSynonymInput!): ParagraphSynonym!
  deleteParagraphSynonym(paragraphSynonymIdentifierInput: ParagraphSynonymIdentifierInput!): ParagraphSynonymIdentifier!
  exerciseMutations(exerciseId: Int!): ExerciseMutations
  login(password: String!, username: String!): String!
  register(password: String!, passwordRepeat: String!, username: String!): String!
  relatedWordsGroup(groupId: Int!): RelatedWordGroupMutations
  submitNewAbbreviation(abbreviationInput: AbbreviationInput!): Abbreviation!
  updateParagraphSynonym(maybeSentenceNumber: String, paragraphSynonymIdentifierInput: ParagraphSynonymIdentifierInput!, synonym: String!): ParagraphSynonym!
}

type ParagraphCitation {
  alternative: String
  identifier: ParagraphSynonymIdentifier!
  lawCode: String!
  number: String
  paragraph: String!
  paragraphType: String!
  section: String
  sentence: String
}

type ParagraphCitationAnnotation {
  awaitedParagraph: String!
  citedParagraph: String
  correctness: Correctness!
  explanation: String
  explanationRecommendations: [String!]!
  sampleNodeId: Int!
  userNodeId: Int!
}

input ParagraphCitationAnnotationInput {
  awaitedParagraph: String!
  citedParagraph: String
  correctness: Correctness!
  explanation: String
}

type ParagraphCitationAnnotationMutation {
  delete: ParagraphCitationAnnotation!
  update(paragraphCitationAnnotation: ParagraphCitationAnnotationInput!): ParagraphCitationAnnotation!
}

type ParagraphCitationLocation {
  citedParagraphs: [ParagraphCitation!]!
  from: Int!
  rest: String!
  to: Int!
}

type ParagraphSynonym implements IParagraphSynonymIdentifier {
  lawCode: String!
  paragraph: String!
  paragraphType: String!
  section: String!
  sentenceNumber: String
  synonym: String!
}

type ParagraphSynonymIdentifier implements IParagraphSynonymIdentifier {
  lawCode: String!
  paragraph: String!
  paragraphType: String!
  section: String!
}

input ParagraphSynonymIdentifierInput {
  lawCode: String!
  paragraph: String!
  paragraphType: String!
  section: String!
}

input ParagraphSynonymInput {
  lawCode: String!
  paragraph: String!
  paragraphType: String!
  section: String!
  sentenceNumber: String
  synonym: String!
}

type Query {
  abbreviations: [Abbreviation!]!
  exercise(exerciseId: Int!): Exercise
  exercises: [Exercise!]!
  mySolutions: [SolutionIdentifier!]!
  paragraphSynonyms: [ParagraphSynonym!]!
  relatedWordGroups: [RelatedWordsGroup!]!
  reviewCorrection(exerciseId: Int!): ReviewData!
  reviewCorrectionByUuid(uuid: String!): ReviewData
  users: [User!]!
}

type RelatedWord {
  isPositive: Boolean!
  word: String!
}

type RelatedWordGroupMutations {
  delete: Boolean!
  relatedWord(word: String!): RelatedWordMutations
  submitRelatedWord(relatedWordInput: RelatedWordInput!): RelatedWord!
}

input RelatedWordInput {
  isPositive: Boolean!
  word: String!
}

type RelatedWordMutations {
  delete: RelatedWord!
  edit(relatedWordInput: RelatedWordInput!): RelatedWord!
}

type RelatedWordsGroup {
  content: [RelatedWord!]!
  groupId: Int!
}

type ReviewData {
  comment: String!
  matches: [SolutionNodeMatch!]!
  points: Int!
  sampleSolution: [SampleSolutionNode!]!
  userSolution: [UserSolutionNode!]!
}

enum Rights {
  Admin
  Corrector
  Student
}

type SampleSolutionNode implements SolutionNode {
  applicability: Applicability!
  childIndex: Int!
  focusIntensity: Importance
  id: Int!
  isSubText: Boolean!
  paragraphCitationLocations: [ParagraphCitationLocation!]!
  parentId: Int
  subTexts: [String!]!
  text: String!
}

type SolutionIdentifier {
  correctionFinished: Boolean
  exerciseId: Int!
  exerciseTitle: String!
}

interface SolutionNode {
  applicability: Applicability!
  childIndex: Int!
  focusIntensity: Importance
  id: Int!
  isSubText: Boolean!
  paragraphCitationLocations: [ParagraphCitationLocation!]!
  parentId: Int
  text: String!
}

input SolutionNodeInput {
  applicability: Applicability!
  childIndex: Int!
  focusIntensity: Importance
  id: Int!
  isSubText: Boolean!
  parentId: Int
  text: String!
}

type SolutionNodeMatch {
  certainty: Float
  explanationAnnotationRecommendations: [String!]!
  explanationAnnotations: [ExplanationAnnotation!]!
  explanationCorrectness: Correctness!
  matchStatus: MatchStatus!
  paragraphCitationAnnotation(awaitedParagraph: String!): ParagraphCitationAnnotation
  paragraphCitationAnnotations: [ParagraphCitationAnnotation!]!
  paragraphCitationCorrectness: Correctness!
  sampleNodeId: Int!
  userNodeId: Int!
}

type SolutionNodeMatchMutations {
  delete: SolutionNodeMatch!
  explanationAnnotation(text: String!): ExplanationAnnotationMutations
  paragraphCitationAnnotation(awaitedParagraph: String!): ParagraphCitationAnnotationMutation
  submitExplanationAnnotation(text: String!): ExplanationAnnotation!
  submitParagraphCitationAnnotation(paragraphCitationAnnotation: ParagraphCitationAnnotationInput!): ParagraphCitationAnnotation!
  updateExplanationCorrectness(newCorrectness: Correctness!): Correctness!
  updateParagraphCitationCorrectness(newCorrectness: Correctness!): Correctness!
}

type User {
  rights: Rights!
  username: String!
}

type UserSolution {
  correctionFinished: Boolean!
  correctionSummary: CorrectionSummary
  matches: [SolutionNodeMatch!]!
  node(userSolutionNodeId: Int!): UserSolutionNode
  nodes: [UserSolutionNode!]!
  username: String!
}

input UserSolutionInput {
  solution: [SolutionNodeInput!]!
  username: String!
}

type UserSolutionMutations {
  finishCorrection: Boolean!
  node(userSolutionNodeId: Int!): UserSolutionNodeMutations
  updateCorrectionResult(comment: String!, points: Int!): CorrectionSummary!
}

type UserSolutionNode implements SolutionNode {
  annotations: [Annotation!]!
  applicability: Applicability!
  childIndex: Int!
  focusIntensity: Importance
  id: Int!
  isSubText: Boolean!
  match(sampleSolutionNodeId: Int!): SolutionNodeMatch
  paragraphCitationLocations: [ParagraphCitationLocation!]!
  parentId: Int
  text: String!
}

type UserSolutionNodeMutations {
  annotation(annotationId: Int!): AnnotationMutations
  match(sampleSolutionNodeId: Int!): SolutionNodeMatchMutations
  submitMatch(sampleSolutionNodeId: Int!): [SolutionNodeMatch!]!
  upsertAnnotation(annotation: AnnotationInput!, maybeAnnotationId: Int): Annotation! @deprecated(reason: "will be eventually split in insert & update!")
}